package net.snowtiger.spliced.atw.construct

import net.snowtiger.ringing.{Method, NamedMethod}
import net.snowtiger.spliced.MethodAssessor

import scala.io.Source

/**
 * @author mark
 */

object SolutionOutputter
{
	val nbells = 8
	val methodAssessor = MethodAssessor(nbells)
	val libraryMethods = methodAssessor.parseMethods(Source.fromFile("tdMajor.csv")).filter{_.leadLength==nbells*4}.filter{_.isSymmetric}
	val libraryMethodsByPn = libraryMethods.groupBy(_.lead.slice(0,nbells*2))

	def searchLibrary(unknownMethod: Method) = libraryMethodsByPn.get(unknownMethod.lead.slice(0,nbells*2))
	def main(args: Array[String]): Unit =
	{
		val solution = "*** SOLUTION: 739 (145/32,14326578): C0.0/58-34.16-56.12.36-34-38-14-58 (57) C0.3/-58-16-56-16-34-38-16-58 (23) C0.4/58-38.16-56-16-12-38-12-18 (16) C0.2/-38-14-56-38-12-38.16-12.58 (37) C0.1/-58-16-56-16.34-12.38.14-16.58 (17) C0.6/-36-16.58-56.38-12-38.14-34.58 (14) C1.0/58-58.14-56-16-34-1458-16-38 (22) C1.4/-58-1458-56.12.38-12-38-56-78,-58-1458-56.12.38-12-38.56-56.78 (29) C1.3/-34-14.56-58.36.12-12.58.16-16.58 (45) C1.5/58-36.14-12-36.12-12.38.12-34.78 (33) C1.6/-56-1458-58-38-12-1258-14-38,-56-1458-58-38.12-12.58-14-38 (19) C1.1/58-36.14.56-56.38-12-1458.36-34.58 (29) C2.0/56-56.14-56-36-14-58-16-58 (53) C2.3/34-36.1458-58-16-12-58.16-36.78 (13) C2.5/-34-14-56-16-12-58.34-14.58 (33) C2.6/58-38.14-58-16-12-58.36-14.38 (10) C2.1/-56-14.56-56.38-12-38-34-58,56-56.14-56-38-12-38-34-58 (45) C3.0/-58-14-58-38-12-38.56-14.58 (34) C3.2/-38-1458-12-38-12-1258-14-18,-38-1458-12-38.12-12.58-14-18 (29) C3.1/38-58.16-56-36.12-12.58.12-16.58 (40) C3.5/-38-14-56-16-12-58-14-58 (59) C3.4/-56-16-56-38-12-58-14-18 (45) C3.6/-36-1458-56-16.34-12.38-16-18 (37)"
		//val solution = "*** SOLUTION: 739 (145/32,14326578): C0.0/58-34.16-56.12.36-34-38-14-58 (57) C0.3/-58-16-56-16-34-38-16-58 (23) C0.4/58-38.16-56-16-12-38-12-18 (16) C0.2/-38-14-56-38-12-38.16-12.58 (37) C0.1/-58-16-56-16.34-12.38.14-16.58 (17) C0.6/-36-16.58-56.38-12-38.14-34.58 (14) C1.0/58-58.14-56-16-34-1458-16-38 (22) C1.4/-58-1458-56.12.38-12-38-56-78,-58-1458-56.12.38-12-38.56-56.78 (29) C1.3/-34-14.56-58.36.12-12.58.16-16.58 (45) C1.5/58-36.14-12-36.12-12.38.12-12.78,58-36.14-12-36-12-38-12-78,58-36.14-12-36.12-12.38-12-78,58-36.14-12-36-12-38.12-12.78 (33) C1.6/-56-1458-58-38-12-1258-14-38,-56-1458-58-38.12-12.58-14-38 (19) C1.1/58-36.14.56-56.38-12-1458.36-34.58 (29) C2.0/56-56.14-56-36-14-58-16-58 (53) C2.3/34-36.1458-58-16-12-58.16-36.78 (13) C2.5/-34-14-56-16-12-58.34-14.58 (33) C2.6/58-38.14-58-16.34-34.1258.36-14.38 (10) C2.1/-56-14.56-56.38-12-38-34-58,56-56.14-56-38-12-38-34-58 (45) C3.0/-58-14-58-38-12-38.56-14.58 (34) C3.2/-38-1458-12-38-12-1258-14-18,-38-1458-12-38.12-12.58-14-18 (29) C3.1/38-58.16-56-36.12-12.58.12-16.58 (40) C3.5/-38-14-56-16-12-58-14-58 (59) C3.4/-56-16-56-38-12-58-14-18 (45) C3.6/-36-1458-56-16.34-12.38-16-18 (37)"
		//val solution = "*** SOLUTION: 672 (139/32,12436578): C0.0/36-38.14-12-36-14-38-14-18 (12) C0.6/58-38.14.58.12.56.38-12-38-36-18 (28) C0.1/-58-14-56-38-14-1258-36-38 (49) C0.4/38-36.1458-58-38-14-38.56-16.58 (16) C0.2/-58-1458-12-38.12-14.38.14-14.78 (36) C0.3/-56.34.16-12-16-14-1258.36-16.38 (26) C1.0/-38-16-56-16-12-1458-16-38 (45) C1.6/-56-14-58-36.12-14.58.16-56.38 (22) C1.4/-58-16-12-36-12-58-36-38 (37) C1.3/58-38.14-58-38-12-38.12-14.38 (25) C1.5/-56-14-58-16-34-1258.36-14.78 (20) C1.1/58.34.58.14.56-56.38-12-58-14-18 (26) C2.0/58-38.16-12.56.38-34-38-34-78 (32) C2.1/36-38.14-58-38-12-1258.36-34.78,36-38.14-58-38.12-12.58.36-34.78 (10) C2.3/58-38.16-56-36.12-12.38.56-16.78 (27) C2.6/56-36.1458-56-16-12-1458-14-58 (27) C2.5/-36-16-58.12.38-34-1458-56-78 (15) C3.0/56-34.16-58-16-12-38.14-16.58 (31) C3.2/-38-1458-56-38-14-1258.36-16.78 (40) C3.1/-58-14-56-38-14-38-12-58,-58-14-56-38-14-38.12-12.58 (45) C3.5/-38-14-56-16-12-58-14-58 (59) C3.4/-56-16-56.12.38-34-1458-12-38 (29) C3.6/38-36.14-58-36-14-1458-36-38 (15)"
		//"*** SOLUTION: 785 (139/31,12654378): C0.0/58-34.16-58.12.36.14-34.58-56-38 (25) C0.3/-58-16.58.12-16-14-38-36-18 (14) C0.4/58-36.14-58-38-34-58.16-34.78 (16) C0.2/-38-16.58-12.36.12-12.58-16-78,-38-16.58-12.36-12-1258-16-78 (24) C0.1/-58-14.56-12.36.12-12.58.16-34.18 (44) C0.6/-36-14.58.12-36.12-34.58.16-34.78 (19) C1.0/58-58.14-58-38-34-38-16-58 (58) C1.4/-58-1458-12.56.38-34-38.56-36.78 (43) C1.3/-34-16-12-38-34-58.12-16.38 (28) C1.5/58-58.14-56-38.14-34.58-56-38 (28) C1.6/56-56.14-12.58.16.34-34.58-56-18 (67) C1.1/58-36.1458-12-16-14-58.16-34.18 (9) C2.0/-36-14-12-36.14-14.58-16-18 (29) C2.3/34-36.14-12-38-34-58-14-38 (35) C2.5/-34-14-56-36.14-34.1258-14-58 (61) C2.6/58-38.14.56.12.56.38-14-1458-56-38 (12) C2.1/-56-1458-58-16-34-1458-14-18 (15) C3.0/-58-14.58-58.16-14-58.16-34.18 (38) C3.2/-38-14-12-16-12-38-36-38 (53) C3.1/38-58.16-12-36.14-12.38.16-14.58 (22) C3.5/-38-14-56-16-12-58-14-58 (59) C3.4/56-36.14-12.58.36-12-38-34-18 (28) C3.6/-36-14-12.58.16-12-58-16-78 (58)"
		val outputter = new SolutionOutputter(solution)
		outputter.print
	}
}

class SolutionOutputter(solution: String)
{
	private val firstC = solution.indexOf("C")
	val header = solution.substring(0, firstC-2)
	val methods = solution.substring(firstC+1).split('C').map{(s)=> parseMethod("C"+s)}

	private def parseMethod(mString: String): (String, List[String], Int) =
	{
		val slash = mString.indexOf('/')
		val open = mString.indexOf('(')
		val close = mString.indexOf(')')
		(mString.substring(0,slash), mString.substring(slash+1, open-1).split(',').toList, mString.substring(open+1,close).toInt)
	}

	private def bluelineLeads(method: NamedMethod): List[List[Int]] =
		method.path(2).grouped(method.leadLength).toList

	def print =
	{
		println(header)
		var bluelinePaths = Map[List[Int],List[String]]()
		for ( (course, pns, score) <- methods)
		{
			val pnString = pns.head
			val method = NamedMethod("X", 8, pnString, "12")
			for (lead <- bluelineLeads(method))
				bluelinePaths+= lead -> ((course+" "+lead.head)::bluelinePaths.getOrElse(lead,Nil))
			val libraryMethods = SolutionOutputter.searchLibrary(method)
			val libraryString = libraryMethods match
			{
				case None => ""
				case Some(list) => "\t*** "+list.map{(m)=> m.namePlusClass+" ("+m.lhGroup+")"}.mkString(", ")+" *** "
			}
			val link = "http://ringing.org/main/pages/method?notation="+pns.head+"&pn-query=Display&stage=8&le=12"
			println(course+" "+pns.mkString(", ")+" ("+score+")\t"+link+libraryString)
		}
		println("Number of distinct leads: "+bluelinePaths.size+" out of total "+23*7)
		for (mlist <- bluelinePaths.values)
			if (mlist.size>1)
				println("Same line: "+mlist.sorted.mkString(", "))
	}

}